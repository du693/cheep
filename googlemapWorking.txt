// import {
// 	GoogleMap,
// 	LoadScript,
// 	Marker,
// 	InfoWindow,
// } from "@react-google-maps/api";
// import React, { useState, useEffect, useContext, useCallback } from "react";
// import { CoordinatesContext } from "../components/Context";
// import { UserContext } from "../components/Context";
// import { SpottedContext } from "../components/Context";
// import InfoBox from "./InfoBox";
// import { fetchDatData } from "../pages/api/fetchGlobalSpots";
// import styles from "./mapstyles.module.css";

const containerStyle = {
	position: "absolute",
	width: "70%",
	height: "100vh",
	zIndex: "10",
	top: "0",
};

const svgIcon = `
<svg viewBox="0 0 2676 1536.603" xmlns="http://www.w3.org/2000/svg">
  <ellipse style="stroke-width: 50px; fill: #C5FFA8; stroke: rgb(36, 36, 36);" cx="1327.289" cy="771.204" rx="742.881" ry="742.881"/>
  <path d="M 870.948 762.107 C 876.371 761.276 881.952 761.172 887.247 759.867 C 897.39 757.367 920.854 756.342 926.57 752.013 C 927.32 751.444 928.459 751.359 929.439 751.129 C 960.182 743.885 996.865 740.931 1043.951 729.052 C 1052.32 726.941 1061.113 726.139 1069.552 724.172 C 1095.786 718.058 1168.232 690.802 1168.713 690.634 C 1182.674 685.77 1187.646 685.108 1201.814 680.283 C 1218.985 674.434 1215.915 694.221 1218.998 666.096 C 1225.504 606.735 1203.068 522.699 1166.038 502.897 C 1100.439 467.815 1086.89 474.471 1046.581 460.343 C 1044.94 459.768 1044.505 457.136 1046.636 456.361 C 1078.441 444.795 1181.613 484.989 1189.918 487.715 C 1205.136 492.71 1292.813 466.933 1325.76 528.199 C 1334.82 545.049 1332.638 538.084 1336.373 562.096 C 1338.303 574.502 1341.178 588.155 1337.434 600.385 C 1333.1 614.336 1331.863 614.568 1333.779 617.151 C 1339.374 624.694 1337.948 626.088 1356.659 659.97 C 1363.258 671.918 1368.365 671.1 1382.491 665.715 C 1407.457 656.195 1410.401 653.872 1421.135 653.657 C 1426.887 653.541 1432.637 652.382 1438.408 653.206 C 1444.733 654.109 1475.635 653.778 1477.375 653.755 C 1488.448 653.611 1493.304 657.952 1506.368 658.414 C 1511.83 658.608 1517.29 658.874 1522.753 658.967 C 1525.11 659.007 1535.311 661.075 1539.958 660.812 C 1540.81 660.764 1541.745 660.831 1542.527 661.138 C 1554.502 665.842 1560.632 658.732 1590.436 666.874 C 1603.655 670.485 1837.695 678.401 1909.548 663.876 C 1924.233 660.907 1929.006 660.856 1947.718 664.525 C 1960.474 667.026 1956.577 670.983 1942.653 672.258 C 1912.658 675.007 1916.913 678.587 1893.476 679.257 C 1878.316 679.689 1876.249 679.779 1873.615 681.953 C 1868.648 686.053 1857.473 687.086 1850.684 686.75 C 1840.204 686.23 1839.695 690.461 1825.658 691.102 C 1820.3 691.347 1823.902 693.422 1819.256 694.707 C 1810.05 697.255 1801.334 701.217 1792.209 704.009 C 1779.589 707.871 1763.859 708.309 1756.328 711.911 C 1748.966 715.431 1716.184 724.087 1706.747 725.689 C 1703.251 726.282 1702.409 726.886 1702.381 728.327 C 1702.282 733.368 1695.861 734.431 1693.75 734.392 C 1682.175 734.181 1685.577 741.298 1653.834 747.883 C 1647.625 749.171 1642.048 745.494 1640.099 749.624 C 1635.784 758.763 1626.19 761.825 1607.543 767.1 C 1595.528 770.499 1591.202 766.117 1589.095 769.108 C 1588.559 769.87 1561.74 783.004 1541.758 780.058 C 1534.324 778.962 1536.469 784.564 1532.428 784.81 C 1528.421 785.053 1524.635 786.878 1520.46 786.119 C 1514.52 785.039 1511.66 788.342 1499.348 786.292 C 1490.588 784.832 1486.145 782.678 1477.192 785.354 C 1465.429 788.871 1460.761 784.221 1458.25 787.006 C 1457.221 788.148 1455.693 788.469 1454.242 788.101 C 1452.66 787.699 1451.004 788.104 1449.533 787.7 C 1443.021 785.915 1443.365 793.626 1438.278 793.837 C 1436.779 793.899 1435.66 794.979 1435.418 796.644 C 1435.224 797.978 1430.103 803.921 1437.902 807.469 C 1438.32 807.659 1438.732 808.41 1438.726 808.895 C 1438.69 811.869 1439.35 815.125 1436.285 817.164 C 1434.653 818.25 1434.053 819.807 1434.254 821.545 C 1434.657 825.029 1433.847 828.421 1433.657 831.85 C 1433.428 835.974 1432.232 839.851 1427.786 841.569 C 1425.547 842.435 1426.639 847.883 1427.803 849.908 C 1430.984 855.442 1431.678 865.584 1436.455 881.152 C 1448.149 919.259 1435.127 884.33 1451.494 925.758 C 1456.74 939.036 1461.149 952.642 1468.022 965.267 C 1477.342 982.388 1476.686 986.067 1484.055 1001.643 C 1486.63 1007.085 1477.913 1001.242 1484.244 1011.208 C 1499.184 1034.719 1528.171 1093.61 1529.936 1111.138 C 1530.372 1115.473 1529.477 1113.117 1525.242 1129.852 C 1521.275 1145.528 1516.812 1147.991 1511.291 1149.676 C 1502.126 1152.473 1472.788 1119.426 1467.947 1125.781 C 1465.407 1129.116 1461.507 1129.639 1460.927 1133.646 C 1459.698 1142.14 1457.803 1148.027 1451.887 1156.8 C 1449.382 1160.516 1446.609 1161.385 1442.257 1160.094 C 1407.337 1149.741 1395.742 1136.243 1377.066 1105.275 C 1356.007 1070.354 1363.088 1083.65 1345.979 1047.476 C 1344.5 1044.348 1344.135 1039.383 1342.786 1037.654 C 1340.115 1034.232 1345.632 1034.629 1343.353 1028.825 C 1335.72 1009.383 1327.7 969.401 1320.497 960.87 C 1309.114 947.393 1310.874 939.85 1301.628 930.456 C 1298.692 927.473 1292.838 922.939 1291.762 921.399 C 1278.7 902.7 1288.285 922.409 1262.237 880.578 C 1256.759 871.781 1252.352 861.005 1250.03 857.242 C 1247.68 853.433 1245.759 849.407 1244.619 845.085 C 1244.154 843.319 1242.809 842.16 1242.246 840.502 C 1237.817 827.45 1237.542 827.074 1236.035 827.342 C 1235.29 827.474 1234.847 828.156 1234.827 828.952 C 1234.715 833.503 1232.132 837.477 1231.818 842.009 C 1231.723 843.369 1230.863 844.705 1230.234 845.994 C 1227.204 852.197 1225.506 858.908 1222.852 865.25 C 1220.814 870.118 1218.044 871.326 1215.485 875.273 C 1213.279 878.675 1209.958 879.302 1206.415 878.955 C 1202.688 878.59 1198.933 878.042 1195.324 877.074 C 1192.028 876.19 1189.049 874.213 1185.496 874.051 C 1185.127 874.034 1184.624 873.68 1184.442 873.343 C 1182.946 870.571 1180.113 870.527 1177.632 870.333 C 1152.88 868.394 1165.627 862.115 1158.5 859.488 C 1149.895 856.316 1153.586 859.67 1138.136 856.192 C 1136.272 855.772 1134.817 854.503 1133.661 852.983 C 1130.732 849.131 1135.461 845.723 1135.812 843.595 C 1136.898 837.004 1120.123 846.854 1102.54 841.397 C 1097.811 839.93 1093.262 840.713 1088.51 841.343 C 1084.781 841.837 1070.175 842.824 1066.551 841.741 C 1052.472 837.528 1055.123 840.446 1049.278 839.673 C 1047.012 839.373 1044.659 839.639 1042.351 839.768 C 1033.997 840.231 1021.199 837.343 1019.602 835.749 C 1019.308 835.455 1018.88 835.143 1018.493 835.116 C 1014.353 834.835 1010.571 832.746 1006.318 832.899 C 979.406 833.867 971.389 824.231 958.663 824.304 C 950.803 824.348 943.218 822.415 935.541 821.197 C 924.911 819.51 931.816 813.082 917.947 812.926 C 898.218 812.704 907.993 812.258 895.607 810.793 C 894.631 810.677 893.716 810.659 893.645 809.14 C 893.563 807.393 892.08 806.707 890.547 806.836 C 886.18 807.201 881.936 806.181 877.629 805.902 C 875.336 805.754 873.011 805.848 870.905 804.549 C 870.225 804.13 869.222 804.047 868.385 804.099 C 865.023 804.31 861.81 803.176 858.486 803.104 C 856.844 803.069 855.956 802.321 855.47 800.617 C 854.938 798.75 852.747 798.282 852.068 799.825 C 850.14 804.208 848.079 802.528 828.127 802.21 C 825.649 802.171 823.263 801.549 820.876 800.987 C 799.133 795.87 786.732 799.513 770.478 788.875 C 766.477 786.256 768.275 781.292 764.186 781.429 C 754.819 781.744 738.78 778.789 730.543 778.602 C 724.508 778.464 723.169 773.732 727.416 773.674 C 827.981 772.31 833.849 767.794 870.948 762.109 L 870.948 762.107 Z" style="fill: rgb(36, 36, 36);"/>
</svg>
`;

const MapComponent = React.memo(function MapComponent({
	onMapLoaded,
	globalIsOn,
	handleMapPending,
}) {
	console.log("map rendered");
	const [hasRunEffect, setHasRunEffect] = useState(false);
	const [selectedBird, setSelectedBird] = useState(null);
	const [globalUser, setGlobalUser] = useState(null);
	const { setCoordinates } = useContext(CoordinatesContext);
	const [globalSpots, setGlobalSpots] = useState([]);
	const { spotted } = useContext(SpottedContext);
	const [locationPermission, setLocationPermission] = useState("pending");
	const [isMapLoaded, setMapLoaded] = useState(false);
	const [marker, setMarker] = useState([]);
	const [userLocationAvailable, setUserLocationAvailable] = useState(false);
	const [userLocation, setUserLocation] = useState({
		lat: null,
		lng: null,
	});
	const [mapInstance, setMapInstance] = useState(null);
	const [didAttemptSetFromUserLocation, setDidAttemptSetFromUserLocation] =
		useState(false);
	const center =
		userLocation.lat && userLocation.lng
			? userLocation
			: { lat: -3.745, lng: -38.523 };

	useEffect(() => {
		if (globalIsOn && !hasRunEffect) {
			fetchDatData()
				.then((data) => {
					if (
						data &&
						data.globalSpots &&
						Array.isArray(data.globalSpots)
					) {
						const uniqueSpots = data.globalSpots.filter(
							(spot) =>
								!globalSpots.some(
									(existingSpot) =>
										existingSpot.lat === spot.lat
								)
						);

						setGlobalSpots((prevGlobalSpots) => [
							...prevGlobalSpots,
							...uniqueSpots,
						]);
						setHasRunEffect(true);
						console.log("this has run once!");
					}
				})
				.catch((error) => {
					console.error("Error fetching global spots:", error);
				});
		}
	}, [globalIsOn, hasRunEffect]);

	function getLocation(e) {
		console.log("get location");
		if (e) {
			const lat = e.latLng.lat();
			const lng = e.latLng.lng();
			setCoordinates({ lat, lng });

			const newMarker = {
				position: { lat, lng },
				title: "Clicked Location",
			};
			setMarker([newMarker]);
		} else if (
			userLocation.lat !== null &&
			userLocation.lng !== null &&
			!didAttemptSetFromUserLocation
		) {
			setCoordinates({
				lat: userLocation.lat,
				lng: userLocation.lng,
			});
			setMarker([
				{
					position: {
						lat: userLocation.lat,
						lng: userLocation.lng,
					},
					title: "User Location",
				},
			]);
			setDidAttemptSetFromUserLocation(true);
		}
	}

	useEffect(() => {
		console.log("geolocation rerendered");
		let locationTimeout;
		if (navigator.geolocation) {
			locationTimeout = setTimeout(() => {
				if (locationPermission === "pending") {
					console.log("Location request timed out.");
					setLocationPermission("timeout");
					handleMapPending();
				}
			});

			navigator.geolocation.getCurrentPosition(
				(position) => {
					setMapLoaded(true);
					console.log(
						"Successfully fetched geolocation:",
						position.coords
					);
					setUserLocation({
						lat: position.coords.latitude,
						lng: position.coords.longitude,
					});

					setLocationPermission("granted");
					getLocation();

					setUserLocationAvailable(true);
					onMapLoaded();
				},
				(error) => {
					clearTimeout(locationTimeout);
					console.log("Error fetching geolocation:", error);
					setLocationPermission("denied");
				}
			);
		} else {
			setMapLoaded(true);
			console.log("Geolocation is not supported by this browser.");
			setLocationPermission("unsupported");
		}
		return () => clearTimeout(locationTimeout);
	}, []);

	useEffect(() => {
		if (userLocation.lat !== null && userLocation.lng !== null) {
			console.log("Marker for location");
			getLocation();
		}
	}, [userLocation]);

	const date =
		selectedBird && selectedBird.timeSpotted
			? new Date(selectedBird.timeSpotted)
			: null;
	let formattedDate = "";
	if (date) {
		formattedDate = `${
			date.getMonth() + 1
		}/${date.getDate()}/${date.getFullYear()} ${date.getHours()}:${
			date.getMinutes() < 10 ? "0" : ""
		}${date.getMinutes()}`;
	}

	const handleRecenter = () => {
		if (userLocation && mapInstance) {
			mapInstance.panTo(userLocation);
			setMarker([
				{
					position: {
						lat: userLocation.lat,
						lng: userLocation.lng,
					},
					title: "User Location",
				},
			]);
		}
	};

	return (
		<>
			<div className={styles.centerPosition}>
				<svg
					onClick={handleRecenter}
					className={styles.target}
					xmlns="http://www.w3.org/2000/svg"
					version="1"
					viewBox="0 0 24 24"
					enableBackground="new 0 0 24 24"
				>
					<path d="M 11 1 L 11 3.03125 C 6.7956596 3.4828018 3.4828018 6.7956596 3.03125 11 L 1 11 L 1 13 L 3.03125 13 C 3.4828018 17.20434 6.7956596 20.517198 11 20.96875 L 11 23 L 13 23 L 13 20.96875 C 17.20434 20.517198 20.517198 17.20434 20.96875 13 L 23 13 L 23 11 L 20.96875 11 C 20.517198 6.7956596 17.20434 3.4828018 13 3.03125 L 13 1 L 11 1 z M 12 5 C 15.9 5 19 8.1 19 12 C 19 15.9 15.9 19 12 19 C 8.1 19 5 15.9 5 12 C 5 8.1 8.1 5 12 5 z M 12 8 C 9.790861 8 8 9.790861 8 12 C 8 14.209139 9.790861 16 12 16 C 14.209139 16 16 14.209139 16 12 C 16 9.790861 14.209139 8 12 8 z" />
				</svg>
			</div>
			<LoadScript
				googleMapsApiKey="AIzaSyDmuWEOgTRGwCDap5w6Dyt8DrMo6-jv9Ek"
				onLoad={() => {
					onMapLoaded();
				}}
				onError={(err) => console.error("Map load error:", err)}
			>
				{isMapLoaded ? (
					<GoogleMap
						onLoad={(loadedMap) => {
							setMapInstance(loadedMap);
						}}
						mapContainerStyle={containerStyle}
						center={center}
						zoom={17}
						onClick={getLocation}
						options={{
							mapId: "d0df0c7b48f53989",
							disableDefaultUI: true,
						}}
					>
						{marker.map((singleMarker, index) => (
							<Marker
								key={index}
								position={singleMarker.position}
								title={singleMarker.title}
							/>
						))}
						{!globalIsOn
							? spotted
									.filter((spot) => spot)
									.map((spot, index) => (
										<Marker
											onClick={() =>
												setSelectedBird(spot)
											}
											key={index}
											icon={{
												url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(
													svgIcon
												)}`,
												scaledSize:
													new window.google.maps.Size(
														50,
														50
													),
											}}
											position={{
												lat: parseFloat(spot.lat),
												lng: parseFloat(spot.lng),
											}}
										/>
									))
							: globalSpots
									.filter((spot) => spot)
									.map((spot, index) => (
										<Marker
											onClick={() => {
												setSelectedBird(spot.spotted);
												setGlobalUser(spot.username);
											}}
											key={index}
											icon={{
												url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(
													svgIcon
												)}`,
												scaledSize:
													new window.google.maps.Size(
														50,
														50
													),
											}}
											position={{
												lat: parseFloat(
													spot.spotted.lat
												),
												lng: parseFloat(
													spot.spotted.lng
												),
											}}
										/>
									))}
						////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						{selectedBird && (
							<InfoWindow
								position={{
									lat: parseFloat(selectedBird.lat),
									lng: parseFloat(selectedBird.lng),
								}}
								onCloseClick={() => setSelectedBird(null)}
							>
								<InfoBox
									globalUser={globalUser}
									globalIsOn={globalIsOn}
									selectedBird={selectedBird}
									formattedDate={formattedDate}
								/>
							</InfoWindow>
						)}
					</GoogleMap>
				) : (
					<p>Loading...</p>
				)}
			</LoadScript>
		</>
	);
});

export default MapComponent;
